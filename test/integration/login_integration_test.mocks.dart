// Mocks generated by Mockito 5.4.6 from annotations
// in online_grocery/test/integration/login_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:online_grocery/data/datasources/local/secure_storage.dart'
    as _i10;
import 'package:online_grocery/data/models/request/user_login_schema.dart'
    as _i8;
import 'package:online_grocery/domain/core/failures.dart' as _i6;
import 'package:online_grocery/domain/entities/user_info_entity.dart' as _i9;
import 'package:online_grocery/domain/entities/user_login_entity.dart' as _i7;
import 'package:online_grocery/domain/repositories/auth_repository.dart' as _i4;
import 'package:online_grocery/presentation/error/failure_mapper.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBuildContext_1 extends _i1.SmartFake implements _i3.BuildContext {
  _FakeBuildContext_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i4.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.UserLoginEntity>> login(
    _i8.UserLoginSchema? userLoginSchema,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [userLoginSchema]),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i7.UserLoginEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i7.UserLoginEntity>(
                    this,
                    Invocation.method(#login, [userLoginSchema]),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i7.UserLoginEntity>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.UserInfoEntity>> getUserInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getUserInfo, []),
            returnValue:
                _i5.Future<_i2.Either<_i6.Failure, _i9.UserInfoEntity>>.value(
                  _FakeEither_0<_i6.Failure, _i9.UserInfoEntity>(
                    this,
                    Invocation.method(#getUserInfo, []),
                  ),
                ),
          )
          as _i5.Future<_i2.Either<_i6.Failure, _i9.UserInfoEntity>>);
}

/// A class which mocks [SecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorage extends _i1.Mock implements _i10.SecureStorage {
  MockSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#saveString, [key, value]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveToken, [token]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveRefreshToken(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#saveRefreshToken, [refreshToken]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getToken() =>
      (super.noSuchMethod(
            Invocation.method(#getToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#getRefreshToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<void> saveLocale(String? locale) =>
      (super.noSuchMethod(
            Invocation.method(#saveLocale, [locale]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [FailureMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFailureMapper extends _i1.Mock implements _i11.FailureMapper {
  MockFailureMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeBuildContext_1(this, Invocation.getter(#context)),
          )
          as _i3.BuildContext);

  @override
  String mapFailureToMessage(_i6.Failure? failure) =>
      (super.noSuchMethod(
            Invocation.method(#mapFailureToMessage, [failure]),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.method(#mapFailureToMessage, [failure]),
            ),
          )
          as String);
}
